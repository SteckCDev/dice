from datetime import datetime, timedelta
from decimal import Decimal

from core.schemas.pvp import (
    PVPDTO,
    PVPDetailsDTO,
)
from core.schemas.pvpc import (
    PVPCDetailsDTO
)
from core.schemas.user import (
    UserDTO,
    UserCacheDTO,
)
from .formatting.emojis import get_balance_emoji
from .formatting.html import (
    bold,
    cursive,
    link,
    code,
)


class Messages:
    @staticmethod
    def start() -> str:
        return f"{bold('–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –î–∞–π—Å üëã')}\n\n" \
               f"{cursive('üé≤ –ö—É–±–∏–∫ –∫—Ä—É—Ç–∏—Ç—Å—è - –∫—ç—à –º—É—Ç–∏—Ç—Å—è')}\n\n" \
               f"- {bold('/balance')} - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n" \
               f"- {bold('/profile')} - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n" \
               f"- {bold('/pvb')} - –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º\n" \
               f"- {bold('/pvp')} - –∏–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º\n" \
               f"- {bold('/pvpc')} - –∏–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º –≤ —á–∞—Ç–µ\n" \
               f"- {bold('/lottery')} - —Ä–æ–∑—ã–≥—Ä—ã—à–∏\n" \
               f"- {bold('/support')} - –ø–æ–¥–¥–µ—Ä–∂–∫–∞"

    @staticmethod
    def balance(balance: int, beta_balance: int) -> str:
        return f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {bold(balance)}\n" \
               f"üí¥ –ë–µ—Ç–∞-–±–∞–ª–∞–Ω—Å: {bold(beta_balance)}"

    @staticmethod
    def games(selected_balance: int, beta_mode: bool) -> str:
        return f"{bold('üé≤ –î–∞–π—Å / –†–µ–∂–∏–º—ã –∏–≥—Ä')}\n\n" \
               f"{get_balance_emoji(beta_mode)} –í–∞—à –±–∞–ª–∞–Ω—Å: {bold(selected_balance)}"

    @staticmethod
    def profile(name: str, balance: int, beta_balance: int, joined_at: datetime, games_count: int) -> str:
        return f"{bold('üé≤ –î–∞–π—Å / –ü—Ä–æ—Ñ–∏–ª—å')}\n\n" \
               f"–ò–º—è: {bold(name)}\n" \
               f"–ë–∞–ª–∞–Ω—Å: {bold(balance)}\n" \
               f"–ë–µ—Ç–∞-–±–∞–ª–∞–Ω—Å: {bold(beta_balance)}\n" \
               f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {bold(joined_at.strftime('%y.%m.%d %H:%M'))} (UTC)\n" \
               f"–í—Å–µ–≥–æ –∏–≥—Ä: {bold(games_count)}"

    @staticmethod
    def lottery() -> str:
        return "üéâ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç"

    @staticmethod
    def support() -> str:
        return "ü§ñ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É"

    @staticmethod
    def on_issue() -> str:
        return "üîß –£ –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

    @staticmethod
    def game_mode_disabled() -> str:
        return f"üîß –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ—Ç —Ä–µ–∂–∏–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {bold('–ø–ª–∞–Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö')}, " \
               f"–≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ"

    @staticmethod
    def transactions_disabled() -> str:
        return f"üîß –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {bold('–ø–ª–∞–Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö')}, " \
               f"–≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ"

    @staticmethod
    def transactions_direction_disabled() -> str:
        return f"üîß –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ " \
               f"{bold('–ø–ª–∞–Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö')}, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ"

    @staticmethod
    def balance_is_not_enough() -> str:
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"

    @staticmethod
    def bet_out_of_limits(min_bet: int, max_bet: int) -> str:
        return f"üîî –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –º–µ–∂–¥—É {min_bet} –∏ {max_bet}"

    @staticmethod
    def dice_not_direct() -> str:
        return "üõë –í—Ö–æ–¥ —Å –Ω–∞–º–∞–≥–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫—É–±–∏–∫–∞–º–∏ –∑–∞–ø—Ä–µ—â—ë–Ω!"

    @staticmethod
    def force_to_subscribe() -> str:
        return f"üîî –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Ç–∞—Ö:\n" \
               f" 1. {link('–ø–µ—Ä–≤—ã–π —á–∞—Ç', 'https://google.com')}\n" \
               f" 2. {link('–≤—Ç–æ—Ä–æ–π —á–∞—Ç', 'https://google.com')}"

    @staticmethod
    def terms_and_conditions() -> str:
        return f"{bold('üìã –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã')}\n\n" \
               f"1. –ü–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±–æ–π—Ü–æ–≤—Å–∫–æ–≥–æ –∫–ª—É–±–∞"

    @staticmethod
    def terms_accepted() -> str:
        return f"üé≤ –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!"

    @staticmethod
    def terms_rejected() -> str:
        return f"‚ùå –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–∞ {bold('—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã')}"

    @staticmethod
    def pvb_in_process() -> str:
        return "üé≤ –í—ã –≤—Å—ë –µ—â—ë –≤ –∏–≥—Ä–µ –∏ —Ç—Ä—è—Å—ë—Ç–µ –∫–æ—Å—Ç—å –≤ –ª–∞–¥–æ–Ω—è—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É, –±—Ä–æ—Å–∏–≤ –∫—É–±–∏–∫"

    @staticmethod
    def pvb_bots_turn() -> str:
        return bold("ü§ñ –ë—Ä–æ—Å–∞–µ—Ç –±–æ—Ç")

    @staticmethod
    def pvb_your_turn() -> str:
        return bold("üé≤ –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫!")

    @staticmethod
    def pvb(balance: int, beta_mode: bool) -> str:
        return f"{bold('ü§ñ –î–∞–π—Å / –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"{get_balance_emoji(beta_mode)} –í–∞—à –±–∞–ª–∞–Ω—Å: {bold(balance)}"

    @staticmethod
    def pvb_history(wins_percent: float) -> str:
        return f"{bold('ü§ñ –î–∞–π—Å / –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º - –∏—Å—Ç–æ—Ä–∏—è (5)')}\n\n" \
               f"üé≤ –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {bold(f'{wins_percent:.1f}%')}"

    @staticmethod
    def pvb_instruction() -> str:
        return f"{bold('ü§ñ –î–∞–π—Å / –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')}"

    @staticmethod
    def pvb_create(
            bots_turn_first: bool,
            beta_mode: bool,
            selected_balance: int,
            bet: int,
            min_bet: int,
            max_bet: int
    ) -> str:
        upper_limit = selected_balance if min_bet < selected_balance < max_bet else max_bet
        balance_emoji: str = get_balance_emoji(beta_mode)

        return f"{bold('ü§ñ –î–∞–π—Å / –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"{balance_emoji} –í–∞—à –±–∞–ª–∞–Ω—Å: {bold(selected_balance)}\n" \
               f"{balance_emoji} –°—Ç–∞–≤–∫–∞: {bold(bet)}\n" \
               f"üîÅ –ü–µ—Ä–≤—ã–º {bold('–±—Ä–æ—Å–∞–µ—Ç –±–æ—Ç' if bots_turn_first else '–±—Ä–æ—Å–∞–µ—Ç–µ –≤—ã')}\n\n" \
               f"{cursive(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –æ—Ç {min_bet} –¥–æ {upper_limit}')}"

    @staticmethod
    def pvb_result(beta_mode: bool, selected_balance: int, player_won: bool | None, game_id: int) -> str:
        if player_won is None:
            result = "‚úå –ù–∏—á—å—è! –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –µ—â—ë —Ä–∞–∑"
        elif player_won:
            result = "üî• –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
        else:
            result = "üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"

        return f"üé≤ –ò–≥—Ä–∞ #{game_id:03}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"{result}\n" \
               f"{get_balance_emoji(beta_mode)} –í–∞—à –±–∞–ª–∞–Ω—Å: {bold(selected_balance)}"

    @staticmethod
    def pvp_join_rejected(game_id: int, beta_mode: bool) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ"

    @staticmethod
    def pvp_already_started(game_id: int, beta_mode: bool) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"‚ùå –ö –∏–≥—Ä–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é"

    @staticmethod
    def pvp_creator_late(game_id: int, beta_mode: bool) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –±–æ—Ç –±—Ä–æ—Å–∏–ª –∫–æ—Å—Ç—å –∑–∞ –≤–∞—Å"

    @staticmethod
    def pvp_expired(game_id: int, beta_mode: bool, bet: int, ttl: timedelta) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"‚åõ –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - {ttl.seconds // 3600} —á–∞—Å–æ–≤, " \
               f"—Å—Ç–∞–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n" \
               f"{get_balance_emoji(beta_mode)} –°—Ç–∞–≤–∫–∞: {bold(bet)}"

    @staticmethod
    def pvp(available_pvp_games_count: int, pages_total: int, page: int = 1) -> str:
        if available_pvp_games_count == 0:
            return f"{bold('üë• –î–∞–π—Å / –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º')}\n\n" \
                   f"{cursive('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä')}"

        return f"{bold('üë• –î–∞–π—Å / –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º')}\n\n" \
               f"–î–æ—Å—Ç—É–ø–Ω–æ –∏–≥—Ä: {bold(available_pvp_games_count)}\n" \
               f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {bold(f'{page} / {pages_total}')}"

    @staticmethod
    def pvp_instruction() -> str:
        return f"{bold('üë• –î–∞–π—Å / –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')}\n\n" \
               "–í—ã –º–æ–∂–µ—Ç–µ, –ª–∏–±–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é\n" \
               "- –ï—Å–ª–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É –≤—Å—Ç—É–ø–∞–µ—Ç –∏–≥—Ä–æ–∫ –∏ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫, " \
               "—É —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã –µ—Å—Ç—å –º–∏–Ω—É—Ç–∞ —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –≤ –æ—Ç–≤–µ—Ç, –∏–Ω–∞—á–µ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –±–æ—Ç\n" \
               "- –ï—Å–ª–∏ –∏–≥—Ä—É –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤, –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è " \
               "–∏ —Å—Ç–∞–≤–∫–∞ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è"

    @staticmethod
    def pvp_rating(is_empty: bool) -> str:
        empty_caption = "ü•á –ó–¥–µ—Å—å –ø—É—Å—Ç–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º —Ç–æ–ø-1 –∏–≥—Ä–æ–∫–æ–º" if is_empty else ""

        return f"{bold('üë• –î–∞–π—Å / –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º - —Ä–µ–π—Ç–∏–Ω–≥')}\n\n" \
               f"üèÜ –ö—Ä–∏—Ç–µ—Ä–∏–π: —Å—É–º–º–∞ —á–∏—Å—Ç–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞\n\n" \
               f"{empty_caption}"

    @staticmethod
    def pvp_history(wins_percent: float) -> str:
        return f"{bold('üë• –î–∞–π—Å / –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º - –∏—Å—Ç–æ—Ä–∏—è (5)')}\n\n" \
               f"üé≤ –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {bold(f'{wins_percent:.1f}%')}"

    @staticmethod
    def pvp_details(user: UserDTO, pvp_details: PVPDetailsDTO) -> str:
        if user.tg_id == pvp_details.creator_tg_id:
            cancel_caption = ""

            if pvp_details.cancellation_unlocks_in:
                cancel_caption = f"–ò–≥—Ä—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ " \
                                 f"{pvp_details.cancellation_unlocks_in.seconds // 60} –º–∏–Ω—É—Ç"

            return f"üé≤ –ò–≥—Ä–∞ #{pvp_details.id:03}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if pvp_details.beta_mode else ''} " \
                   f"{bold('[–í–∞—à–∞]')}\n\n" \
                   f"{get_balance_emoji(pvp_details.beta_mode)} –°—Ç–∞–≤–∫–∞: {bold(pvp_details.bet)}\n\n" \
                   f"{cancel_caption}"

        balance_for_mode = user.beta_balance if pvp_details.beta_mode else user.balance

        if balance_for_mode >= pvp_details.bet:
            join_caption = bold("–ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É –±—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç—å")
        else:
            join_caption = bold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ")

        return f"üé≤ –ò–≥—Ä–∞ #{pvp_details.id:03}" \
               f"{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if pvp_details.beta_mode else ''}\n\n" \
               f"ü§ô –°–æ–ø–µ—Ä–Ω–∏–∫: {bold(pvp_details.creator_name)}\n\n" \
               f"{get_balance_emoji(pvp_details.beta_mode)} –ë–∞–ª–∞–Ω—Å: {bold(balance_for_mode)}\n" \
               f"{get_balance_emoji(pvp_details.beta_mode)} –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {bold(pvp_details.bet)}\n\n" \
               f"{join_caption}"

    @staticmethod
    def pvp_cancel(game_id: int) -> str:
        return bold(f'‚úÖ –ò–≥—Ä–∞ #{game_id:03} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    @staticmethod
    def pvp_create(user_cache: UserCacheDTO, selected_balance: int, min_bet: int, max_bet: int) -> str:
        upper_limit = selected_balance if min_bet < selected_balance < max_bet else max_bet
        balance_emoji = get_balance_emoji(user_cache.beta_mode)

        return f"{bold('üë• –î–∞–π—Å / –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º')} {cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if user_cache.beta_mode else ''}\n\n" \
               f"{balance_emoji} –í–∞—à –±–∞–ª–∞–Ω—Å: {bold(selected_balance)}\n" \
               f"{balance_emoji} –°—Ç–∞–≤–∫–∞: {bold(user_cache.pvp_bet)}\n\n" \
               f"{cursive(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –æ—Ç {min_bet} –¥–æ {upper_limit}')}"

    @staticmethod
    def pvp_confirm(game_id: int, user_cache: UserCacheDTO) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03} —Å–æ–∑–¥–∞–Ω–∞!')} " \
               f"{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if user_cache.beta_mode else ''}\n\n" \
               f"{get_balance_emoji(user_cache.beta_mode)} –°—Ç–∞–≤–∫–∞: {bold(user_cache.pvp_bet)}"

    @staticmethod
    def pvp_join(game_id: int, beta_mode: bool) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"–ñ–¥—ë–º –±—Ä–æ—Å–æ–∫ –∏–≥—Ä–æ–∫–∞ –º–∏–Ω—É—Ç—É, –∏–Ω–∞—á–µ –±–æ—Ç –±—Ä–æ—Å–∏—Ç –∫–æ—Å—Ç—å –∑–∞ –Ω–µ–≥–æ"

    @staticmethod
    def pvp_started(game_id: int, beta_mode: bool, bet: int, opponent_tg_name: str) -> str:
        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{game_id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if beta_mode else ''}\n\n" \
               f"ü§ô –°–æ–ø–µ—Ä–Ω–∏–∫: {bold(opponent_tg_name)}\n" \
               f"{get_balance_emoji(beta_mode)} –°—Ç–∞–≤–∫–∞: {bold(bet)}\n\n" \
               f"–ë—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç—å –∏–ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –±–æ—Ç!"

    @staticmethod
    def pvp_finished(pvp: PVPDTO, user: UserDTO, opponent: UserDTO) -> str:
        opponent_dice = pvp.creator_dice if opponent.tg_id == pvp.creator_tg_id else pvp.opponent_dice

        if pvp.winner_tg_id is None:
            result: str = "‚úå –ù–∏—á—å—è!"
        else:
            result: str = "üî• –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" if pvp.winner_tg_id == user.tg_id else "üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"

        return f"{bold(f'üé≤ –ò–≥—Ä–∞ #{pvp.id:03}')}{cursive(' - –±–µ—Ç–∞-—Ä–µ–∂–∏–º') if pvp.beta_mode else ''}\n\n" \
               f"ü§ô {opponent.tg_name} –≤—ã–±—Ä–æ—Å–∏–ª {bold(opponent_dice)}\n" \
               f"{result}\n" \
               f"{get_balance_emoji(pvp.beta_mode)} –í–∞—à –±–∞–ª–∞–Ω—Å: " \
               f"{bold(user.beta_balance if pvp.beta_mode else user.balance)}"

    @staticmethod
    def pvpc() -> str:
        return "‚öî –î–ª—è –∏–≥—Ä—ã —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º –≤ —á–∞—Ç–µ, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç"

    @staticmethod
    def pvpc_already_exists() -> str:
        return "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∏–≥—Ä–µ"

    @staticmethod
    def pvpc_min_bet_set(min_bet: int) -> str:
        return f"üîî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {min_bet}"

    @staticmethod
    def pvpc_max_bet_set(max_bet: int) -> str:
        return f"üîî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {max_bet}"

    @staticmethod
    def pvpc_create() -> str:
        return f"{bold('üîî –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω')}\n\n" \
               f"{cursive('–¥–∞–π—Å —Å—Ç–∞–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–∞—É–Ω–¥–æ–≤')}"

    @staticmethod
    def pvpc_rounds_out_of_limits(max_rounds: int) -> str:
        return f"üîî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {bold('1')} –¥–æ {bold(max_rounds)}"

    @staticmethod
    def pvpc_already_started() -> str:
        return "‚ùå –ò–≥—Ä–∞ –±–æ–ª–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    @staticmethod
    def pvpc_already_in_game() -> str:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É"

    @staticmethod
    def pvpc_join_rejected() -> str:
        return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–≤–æ—é –∂–µ –∏–≥—Ä—É"

    @staticmethod
    def pvpc_cancellation_rejected() -> str:
        return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∏–≥—Ä—É"

    @staticmethod
    def pvpc_not_found() -> str:
        return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    @staticmethod
    def pvpc_canceled() -> str:
        return "‚úÖ –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"

    @staticmethod
    def pvpc_join(game_id: int, bet: int, rounds: int) -> str:
        return f"{bold(f'üü° –ò–≥—Ä–∞ #{game_id:03}')}\n\n" \
               f"üíµ –°—Ç–∞–≤–∫–∞: {bold(bet)}\n" \
               f"üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤: {bold(rounds)}"

    @staticmethod
    def pvpc_throwing_for_user(game_id: int, user_tg_name: str) -> str:
        return f"{bold(f'üî• –ò–≥—Ä–∞ #{game_id:03}')}\n\n" \
               f"üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏ –∑–∞ {user_tg_name}"

    @staticmethod
    def pvpc_start(pvpc_details: PVPCDetailsDTO) -> str:
        return f"{bold(f'üî• –ò–≥—Ä–∞ #{pvpc_details.id:03}')}\n\n" \
               f"üíµ –°—Ç–∞–≤–∫–∞: {bold(pvpc_details.bet)}\n" \
               f"üé≤ –†–∞—É–Ω–¥–æ–≤: {bold(pvpc_details.rounds)}\n\n" \
               f"{link(pvpc_details.creator_tg_name, f'tg://user?id={pvpc_details.creator_tg_id}')}\n" \
               f"----------\n" \
               f"{link(pvpc_details.opponent_tg_name, f'tg://user?id={pvpc_details.opponent_tg_id}')}\n\n" \
               f"üî• –ë—Ä–æ—Å–∞–π—Ç–µ –∫–æ—Å—Ç–∏!"

    @staticmethod
    def pvpc_results(pvpc_details: PVPCDetailsDTO) -> str:
        winner_or_draw = cursive("–¥—Ä—É–∂–±–∞") if pvpc_details.winner_tg_name is None else bold(pvpc_details.winner_tg_name)

        return f"{bold(f'üî• –ò–≥—Ä–∞ #{pvpc_details.id:03}')}\n\n" \
               f"üíµ –°—Ç–∞–≤–∫–∞: {bold(pvpc_details.bet)}\n" \
               f"üé≤ –†–∞—É–Ω–¥–æ–≤: {bold(pvpc_details.rounds)}\n\n" \
               f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_or_draw}\n\n" \
               f"{link(pvpc_details.creator_tg_name, f'tg://user?id={pvpc_details.creator_tg_id}')} " \
               f"–≤—ã–±—Ä–æ—Å–∏–ª –Ω–∞ {bold(pvpc_details.creator_scored)}\n" \
               f"----------\n" \
               f"{link(pvpc_details.opponent_tg_name, f'tg://user?id={pvpc_details.opponent_tg_id}')} " \
               f" –≤—ã–±—Ä–æ—Å–∏–ª –Ω–∞ {bold(pvpc_details.opponent_scored)}"

    @staticmethod
    def transaction(balance: int, min_deposit: int, min_withdraw: int) -> str:
        return f"{bold('üí∞ –î–∞–π—Å / –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}\n\n" \
               f"üíµ –ë–∞–ª–∞–Ω—Å: {bold(balance)}\n\n" \
               f"{cursive(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {min_deposit}')}\n" \
               f"{cursive(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {min_withdraw}')}"

    @staticmethod
    def transaction_history() -> str:
        return f"{bold('üí∞ –î–∞–π—Å / –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}\n\n" \
               f"{cursive('–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.')}" \
               f"{cursive('–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.')}"

    @staticmethod
    def transaction_history_manage(
            method: str,
            amount: int,
            fee: int,
            amount_with_fee: int,
            details: str,
            bank: str | None = None,
            btc_equivalent: Decimal | None = None
    ) -> str:
        amount_with_fee_caption = bold(amount_with_fee)
        details_caption = f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {bold(details)}\nüè¶ –ë–∞–Ω–∫: {bold(bank)}"

        if method == "btc":
            amount_with_fee_caption += f" ({btc_equivalent:.8f} BTC)"
            details_caption = f"ü™ô –ê–¥—Ä–µ—Å –±–∏—Ç–∫–æ–∏–Ω-–∫–æ—à–µ–ª—å–∫–∞: {bold(details)}"

        return f"{Messages.__transaction_withdraw_header()}\n\n" \
               f"üíµ –ö –≤—ã–≤–æ–¥—É: {bold(amount)}\n" \
               f"üí≤ –ö–æ–º–∏—Å—Å–∏—è: {bold(fee)}%\n" \
               f"üíµ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {amount_with_fee_caption}\n" \
               f"{details_caption}"

    @staticmethod
    def transaction_already_processed() -> str:
        return "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"

    @staticmethod
    def transaction_canceled() -> str:
        return "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    @staticmethod
    def transaction_processed(transaction_id: int, succeed: bool) -> str:
        if succeed:
            return f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id:03} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
        else:
            return f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id:03} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    @staticmethod
    def transaction_deposit_min_limit(min_deposit: int) -> str:
        return f"üîî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {min_deposit} RUB"

    @staticmethod
    def transaction_withdraw_min_limit(min_withdraw: int) -> str:
        return f"üîî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {min_withdraw} RUB"

    @staticmethod
    def __transaction_deposit_header() -> str:
        return bold("‚û° –î–∞–π—Å / –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")

    @staticmethod
    def transaction_deposit() -> str:
        return f"{Messages.__transaction_deposit_header()}\n\n" \
               f"{cursive('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞')}"

    @staticmethod
    def transaction_deposit_amount(min_deposit: int, amount: int, btc_equivalent: Decimal | None = None) -> str:
        btc_caption = f"ü™ô –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ BTC: {btc_equivalent:.8f}\n\n" if btc_equivalent else ""
        enter_amount_tip = cursive(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç {min_deposit} RUB") if amount < min_deposit else ""

        return f"{Messages.__transaction_deposit_header()}\n\n" \
               f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {bold(amount)} RUB\n" \
               f"{btc_caption}" \
               f"{enter_amount_tip}"

    @staticmethod
    def transaction_deposit_confirm_amount(amount: int, btc_equivalent: Decimal | None = None) -> str:
        amount_caption = f"{amount} RUB"

        if btc_equivalent is not None:
            amount_caption += f" ({btc_equivalent:.8f} BTC)"

        return f"{Messages.__transaction_deposit_header()}\n\n" \
               f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {bold(amount_caption)}?"

    @staticmethod
    def transaction_deposit_confirm(
            method: str,
            amount_relative_to_method: int,
            details_relative_to_method: str
    ) -> str:
        currency_tip = "RUB" if method == "card" else "BTC"

        return f"{Messages.__transaction_deposit_header()}\n\n" \
               f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount_relative_to_method} {currency_tip} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n" \
               f"{code(details_relative_to_method)}"

    @staticmethod
    def transaction_create(transaction_id: int) -> str:
        return f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id:03} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n" \
               f"{cursive('–°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ ¬´–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ.')} " \
               f"{cursive('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')}\n\n" \
               f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ù"

    @staticmethod
    def __transaction_withdraw_header() -> str:
        return bold("‚û° –î–∞–π—Å / –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

    @staticmethod
    def transaction_withdraw(balance: int) -> str:
        return f"{Messages.__transaction_withdraw_header()}\n\n" \
               f"üíµ –ë–∞–ª–∞–Ω—Å: {bold(balance)}\n\n" \
               f"{cursive('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.')}\n" \
               f"{cursive('–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ - –∫–∞–∂–¥–æ–º—É —Å–ø–æ—Å–æ–±—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∑–∏–º–∞–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è')}"

    @staticmethod
    def transaction_withdraw_amount(
            min_withdraw: int,
            fee: int,
            balance: int,
            amount: int,
            btc_equivalent: Decimal | None = None
    ) -> str:
        btc_caption = f"ü™ô –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ BTC: {btc_equivalent:.8f}\n" if btc_equivalent else ""

        if balance < min_withdraw:
            enter_amount_tip = cursive(f"\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {min_withdraw} RUB")
        elif balance < amount or amount < min_withdraw:
            enter_amount_tip = cursive(f"\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç {min_withdraw} RUB –¥–æ {balance} RUB")
        else:
            enter_amount_tip = ""

        return f"{Messages.__transaction_withdraw_header()}\n\n" \
               f"üíµ –ë–∞–ª–∞–Ω—Å: {bold(balance)}\n" \
               f"üíµ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {bold(amount)} RUB\n" \
               f"üí≤ –ö–æ–º–∏—Å—Å–∏—è: {bold(fee)}%\n" \
               f"{btc_caption}\n" \
               f"{enter_amount_tip}"

    @staticmethod
    def transaction_withdraw_details(method: str, withdraw_details: str | None, withdraw_bank: str | None) -> str:
        if method == "card":
            if withdraw_details is None and withdraw_bank is None:
                fill_tip = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏."
                details_caption = f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã).\n{fill_tip}"
            elif withdraw_details is None:
                details_caption = "–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)."
            elif withdraw_bank is None:
                details_caption = "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞."
            else:
                details_caption = ""

            return f"{Messages.__transaction_withdraw_header()}\n\n" \
                   f"üè¶ –ë–∞–Ω–∫: {bold(withdraw_bank if withdraw_bank else '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n" \
                   f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {bold(withdraw_details if withdraw_details else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n" \
                   f"{cursive(details_caption)}"
        else:
            if withdraw_details is None:
                details_caption = "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –±–∏—Ç–∫–æ–∏–Ω-–∫–æ—à–µ–ª—å–∫–∞."
            else:
                details_caption = ""

            return f"{Messages.__transaction_withdraw_header()}\n\n" \
                   f"ü™ô –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {bold(withdraw_details)}\n\n" \
                   f"{cursive(details_caption)}"

    @staticmethod
    def transaction_withdraw_confirm(
            method: str,
            balance: int,
            amount: int,
            fee: int,
            amount_with_fee: int,
            details: str,
            bank: str | None = None,
            btc_equivalent: Decimal | None = None
    ) -> str:
        amount_with_fee_caption = bold(amount_with_fee)
        details_caption = f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {bold(details)}\nüè¶ –ë–∞–Ω–∫: {bold(bank)}"

        if method == "btc":
            amount_with_fee_caption += f" ({btc_equivalent:.8f} BTC)"
            details_caption = f"ü™ô –ê–¥—Ä–µ—Å –±–∏—Ç–∫–æ–∏–Ω-–∫–æ—à–µ–ª—å–∫–∞: {bold(details)}"

        return f"{Messages.__transaction_withdraw_header()}\n\n" \
               f"üíµ –ë–∞–ª–∞–Ω—Å: {bold(balance)}\n" \
               f"üíµ –ö –≤—ã–≤–æ–¥—É: {bold(amount)}\n" \
               f"üí≤ –ö–æ–º–∏—Å—Å–∏—è: {bold(fee)}%\n" \
               f"üíµ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {amount_with_fee_caption}\n" \
               f"{details_caption}"

    @staticmethod
    def admin(users_since_launch: int, commands_tree: dict[str, tuple[str, ...]]) -> str:
        commands_with_subcommands = list()

        for command, subcommands in commands_tree.items():
            subcommands_caption = ", ".join(subcommands)
            commands_with_subcommands.append(f"{command} ({subcommands_caption})")

        commands_caption = "\n - ".join(commands_with_subcommands)

        return f"{bold('üé≤ –î–∞–π—Å / –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')}\n\n" \
               f"üôã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {bold(users_since_launch)}\n\n" \
               f"{bold('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')}\n - " \
               f"{commands_caption}\n\n" \
               f"–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –µ—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, " \
               f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—ë –∏–º—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, " \
               f"–Ω–∞–ø—Ä–∏–º–µ—Ä, - {cursive('–∫–æ–º–∏—Å—Å–∏—è')}\n\n" \
               f"–ö–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:\n  - {code('/clear_app_cache')}\n  - {code('/clear_all_cache')}"

    @staticmethod
    def admin_stats(
            users_count: int,
            pvb_fees_income: int,
            pvp_fees_income: int,
            pvpc_fees_income: int,
            withdraws_final_outcome: int,
            pvb_count: int,
            pvp_count: int,
            pvpc_count: int,
            pvb_total_bank: int | None,
            pvp_total_bank: int | None,
            pvpc_total_bank: int | None,
            pvb_bot_income: int | None,
            pvb_bot_wins_percent: float,
            pvb_bot_defeats_percent: float,
            pvb_draws_percent: float
    ) -> str:
        _pvb_bot_income = 0 if pvb_bot_income is None else pvb_bot_income
        income = _pvb_bot_income + pvb_fees_income + pvp_fees_income + pvpc_fees_income - withdraws_final_outcome

        _pvb_total_bank = 0 if pvb_total_bank is None else pvb_total_bank
        _pvp_total_bank = 0 if pvp_total_bank is None else pvp_total_bank
        _pvpc_total_bank = 0 if pvpc_total_bank is None else pvpc_total_bank

        bank = _pvb_total_bank + _pvp_total_bank + _pvpc_total_bank

        return f"{bold('üé≤ –î–∞–π—Å / –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}\n\n" \
               f"üôã‚Äç –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bold(users_count)}\n\n" \
               f"üí∞ –ü—Ä–∏–±—ã–ª—å: {bold(income)} + x RUB\n\n" \
               f"üé≤ –í—Å–µ–≥–æ –∏–≥—Ä: {bold(pvb_count + pvp_count + pvpc_count)}\n" \
               f"  - ü§ñ PVB: {bold(pvb_count)}\n" \
               f"  - üë• PVP: {bold(pvp_count)}\n" \
               f"  - ‚öîÔ∏è PVPC: {bold(pvpc_count)}\n\n" \
               f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {bold(bank)} RUB\n" \
               f"  - ü§ñ PVB: {bold(_pvb_total_bank)} RUB\n" \
               f"  - üë• PVP: {bold(_pvp_total_bank)} RUB\n" \
               f"  - ‚öîÔ∏è PVPC: {bold(_pvpc_total_bank)} RUB\n\n" \
               f"üíµ (PVB) –í—ã–∏–≥—Ä—ã—à –±–æ—Ç–∞: {bold(pvb_bot_income)} RUB\n" \
               f"üèÜ (PVB) –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –±–æ—Ç–∞: {bold(f'{pvb_bot_wins_percent:.1f}')}%\n" \
               f"üíÄ (PVB) –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–π –±–æ—Ç–∞: {bold(f'{pvb_bot_defeats_percent:.1f}')}%\n" \
               f"ü§ù (PVB) –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∏—á—å–∏—Ö: {bold(f'{pvb_draws_percent:.1f}')}%"

    @staticmethod
    def admin_transactions() -> str:
        return f"{bold('üé≤ –î–∞–π—Å / –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}"

    @staticmethod
    def admin_mailing() -> str:
        return f"{bold('üé≤ –î–∞–π—Å / –†–∞—Å—Å—ã–ª–∫–∞')}\n\n" \
               f"{cursive('>[—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏]')}"

    @staticmethod
    def admin_mailing_started() -> str:
        return f"{bold('üé≤ –î–∞–π—Å / –†–∞—Å—Å—ã–ª–∫–∞')}\n\n" \
               f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞"

    @staticmethod
    def admin_config_adjusted() -> str:
        return "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω—ë–Ω"

    @staticmethod
    def admin_transaction_already_processed() -> str:
        return "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"

    @staticmethod
    def admin_transaction_canceled_by_user(transaction_id: int) -> str:
        return f"üîî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id:03} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    @staticmethod
    def admin_transaction_deposit_confirm(
            transaction_id: int,
            user_tg_id: int,
            user_tg_name: str,
            created_at: datetime,
            method: str,
            amount: int,
            btc_equivalent: float | None = None,
            done: bool = False
    ) -> str:
        method_caption = "–∫–∞—Ä—Ç–∞" if method == "card" else "–±–∏—Ç–∫–æ–∏–Ω"
        amount_caption = bold(f"{amount} RUB ")

        if method == "btc":
            amount_caption += f"({btc_equivalent:.8f} BTC)"

        status_emoji = "üíµ" if done else "‚è≥"

        return f"{bold(f'{status_emoji} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id:03} - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')}\n\n" \
               f"üôã‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {link(user_tg_name, f'tg://user?id={user_tg_id}')} | {user_tg_id}\n" \
               f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {bold(created_at.strftime('%y.%m.%d %H:%M'))} (UTC)\n" \
               f"üí∞ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {bold(method_caption)}\n" \
               f"üí∞ –°—É–º–º–∞: {bold(amount_caption)}"

    @staticmethod
    def admin_transaction_withdraw_confirm(
            transaction_id: int,
            user_tg_id: int,
            user_tg_name: str,
            created_at: datetime,
            method: str,
            amount: int,
            fee: int,
            amount_with_fee: int,
            details: str,
            bank: str,
            btc_equivalent: Decimal | None = None,
            btc_equivalent_with_fee: Decimal | None = None,
            done: bool = False
    ) -> str:
        method_caption = "–Ω–∞ –∫–∞—Ä—Ç—É" if method == "card" else "–±–∏—Ç–∫–æ–∏–Ω–æ–º"
        status_emoji = "üíµ" if done else "‚è≥"

        amount_caption = bold(f"{amount} RUB ")
        amount_with_fee_caption = bold(amount_with_fee)
        details_caption = f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {bold(details)}\nüè¶ –ë–∞–Ω–∫: {bold(bank)}"

        if method == "btc":
            amount_caption += f"({btc_equivalent:.8f} BTC)"
            amount_with_fee_caption += f" ({btc_equivalent_with_fee:.8f} BTC)"
            details_caption = f"ü™ô –ê–¥—Ä–µ—Å –±–∏—Ç–∫–æ–∏–Ω-–∫–æ—à–µ–ª—å–∫–∞: {bold(details)}"

        return f"{bold(f'{status_emoji} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction_id:03} - –≤—ã–≤–æ–¥')}\n\n" \
               f"üôã‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {link(user_tg_name, f'tg://user?id={user_tg_id}')} | {user_tg_id}\n" \
               f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {bold(created_at.strftime('%y.%m.%d %H:%M'))} (UTC)\n" \
               f"üí∞ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {bold(method_caption)}\n" \
               f"üí∞ –°—É–º–º–∞: {bold(amount_caption)}\n" \
               f"üí≤ –ö–æ–º–∏—Å—Å–∏—è: {bold(fee)}\n" \
               f"üí∞ –°—É–º–º–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {bold(amount_with_fee_caption)}\n" \
               f"{details_caption}"

    @staticmethod
    def admin_transaction_not_found() -> str:
        return "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ª–∏–±–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"

    @staticmethod
    def admin_app_cache_cleared() -> str:
        return "‚úÖ –ö—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω"

    @staticmethod
    def admin_all_cache_cleared() -> str:
        return "‚úÖ –ö—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω"
