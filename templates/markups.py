from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from common.formatting import get_status_emoji, get_balance_emoji
from settings import settings
from templates.menu import Menu


class Markups:
    navigation = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
        KeyboardButton(Menu.GAMES),
        KeyboardButton(Menu.PROFILE),
        KeyboardButton(Menu.LOTTERY),
        KeyboardButton(Menu.SUPPORT)
    )

    games = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("ü§ñ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º", callback_data="pvb"),
        InlineKeyboardButton("üë• –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º", callback_data="pvp:1"),
        InlineKeyboardButton("‚öî –° —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º –≤ —á–∞—Ç–µ", callback_data="pvpc")
    )

    lottery = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!", url=settings.lottery_url)
    )

    support = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=settings.support_url)
    )

    hide = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõë –ó–∞–∫—Ä—ã—Ç—å", callback_data="hide")
    )

    pvb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å", callback_data="pvb-create"),
        InlineKeyboardButton("üìã –ú–æ–∏ –∏–≥—Ä—ã", callback_data="pvb-history"),
        InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="games"),
        InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="pvb-instruction")
    )

    pvpc = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å!", url=settings.pvpc_url)
    )

    join_chat_return = InlineKeyboardMarkup().add(
        InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="dice-games"),
        InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å!", url=settings.pvpc_url),
    )

    try_too = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–æ–∂–µ!", url=f"{settings.bot_url}?start=pvb]")
    )

    terms_and_conditions = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõë –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="terms-reject"),
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="terms-accept")
    )

    dice_p2p_create = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="dice-p2p:1"),
        InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="dice-p2p-create-confirm")
    )

    @staticmethod
    def back_to(path: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=path)
        )

    @staticmethod
    def profile(beta_mode: bool) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üíµ –ö–∞–ø—É—Å—Ç–∞", callback_data="transactions"),
            InlineKeyboardButton("üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="transactions-mine"),
            InlineKeyboardButton("üìã –¢–æ–ø-5 –ª—É—á—à–∏—Ö", callback_data="top5"),
            InlineKeyboardButton(f"{get_balance_emoji(beta_mode)} –ë–µ—Ç–∞-—Ä–µ–∂–∏–º", callback_data=f"switch-beta"),
            InlineKeyboardButton("üõë –ó–∞–∫—Ä—ã—Ç—å", callback_data="hide")
        )

    @staticmethod
    def transactions() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("‚¨Ö –í—ã–≤–µ—Å—Ç–∏", callback_data="withdrawal"),
            InlineKeyboardButton("‚û° –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="profile")
        )

    @staticmethod
    def transactions_mine(transactions: list) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup()

        for transaction_id, status, method, transaction_type, amount, requested_at in transactions:
            if status == TransactionStatuses.CREATED:
                if transaction_type == "withdrawal":
                    callback_data = f"transaction-details:{transaction_id}"
                else:
                    callback_data = "none"

                sign = "‚è≥"
            elif status == WithdrawalStatuses.WAITING_FOR_PAYMENT:
                callback_data = "none"
                sign = "üü¢"
            elif status == TransactionStatuses.COMPLETED:
                callback_data = "none"
                sign = "‚úÖ"
            elif status == TransactionStatuses.CANCELED_BY_ADMIN:
                callback_data = "none"
                sign = "‚ùå"
            else:
                callback_data = "none"
                sign = "‚úã"

            method_caption = "–±–∏—Ç–∫–æ–∏–Ω-–∫–æ—à–µ–ª—ë–∫" if method == "btc" else "–∫–∞—Ä—Ç–∞"
            type_caption = "–°–ø–∏—Å–∞–Ω–∏–µ" if transaction_type == "withdrawal" else "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"

            markup.add(
                InlineKeyboardButton(
                    f"{sign} {type_caption} {amount} ({method_caption})",
                    callback_data=callback_data
                )
            )

        markup.add(InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="profile"))

        return markup

    @staticmethod
    def transaction_details(transaction_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data=f"transaction-cancel:{transaction_id}"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="transactions-mine")
        )

    @staticmethod
    def top5(players: list, players_names: list) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup()

        for i, player in enumerate(players):
            player_id, winnings = player
            player_name = players_names[i - 1]

            markup.add(
                InlineKeyboardButton(
                    f"ü•á {winnings} RUB - {player_name}", callback_data=f"player:{player_id}:{winnings}:{i}"
                )
            )

        markup.add(InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="profile"))

        return markup

    @staticmethod
    def demo(is_demo_mode) -> InlineKeyboardMarkup:
        caption = "üí¥ –î–µ–º–æ-—Ä–µ–∂–∏–º" if is_demo_mode else "üíµ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"

        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="profile"),
            InlineKeyboardButton(caption, callback_data=f"demo:{int(not is_demo_mode)}")
        )

    @staticmethod
    def pvb_create(bots_turn_first: bool) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="pvb"),
            InlineKeyboardButton(f"üîÅ –ü–µ—Ä–≤—ã–π {'–±–æ—Ç' if bots_turn_first else '—è'}", callback_data="pvb-switch-turn"),
            InlineKeyboardButton("üé≤ –ù–∞—á–∞—Ç—å", callback_data=f"pvb-start")
        )

    @staticmethod
    def dice_bot_mine(games: list) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup()

        if len(games) == 0:
            markup.add(InlineKeyboardButton("üîî –í—ã –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å—ã–≥—Ä–∞–ª–∏", callback_data="None"))
        else:
            for game_id, bet, result, demo_mode in games:
                if result == 1:
                    sign = "‚úÖ"
                elif result == 0:
                    sign = "üíÄ"
                else:
                    sign = "‚úåÔ∏è"

                if demo_mode == 1:
                    demo_emoji = "üí¥"
                else:
                    demo_emoji = "üíµ"

                markup.add(
                    InlineKeyboardButton(
                        f"{sign} –ò–≥—Ä–∞ #{game_id:03} | {demo_emoji} {bet}", callback_data="None"
                    )
                )

        markup.add(InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="dice-bot"))

        return markup

    @staticmethod
    def dice_p2p(
            user_id, games_available: list, page: int, pages_total: int, games_total: int
    ) -> InlineKeyboardMarkup:

        navigation = 0

        markup = InlineKeyboardMarkup()

        markup.add(
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å", callback_data="dice-p2p-create"),
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="dice-p2p:1")
        )

        if page > pages_total:
            page = 1

        if pages_total == 0:
            markup.add(
                InlineKeyboardButton("–ú–æ–∏ –∏–≥—Ä—ã", callback_data=f"dice-p2p-mine:{page}"),
                InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data=f"dice-p2p-rating:{page}")
            )
            markup.add(
                InlineKeyboardButton("<< –ò–≥—Ä—ã", callback_data="dice-games"),
                InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"dice-p2p-instruction:{page}")
            )

            return markup

        elif pages_total == 1:
            page_fill_start = 0
            page_fill_end = games_total

        else:
            if page == 1:
                page_fill_start = 0
                page_fill_end = 5
                navigation = 1

            elif page == pages_total:
                page_fill_start = (pages_total - 1) * 5
                page_fill_end = games_total
                navigation = 2

            else:
                page_fill_start = (page - 1) * 5
                page_fill_end = page * 5
                navigation = 3

        for i in range(page_fill_start, page_fill_end):
            game_id, bet, demo_mode, creator_id = games_available[i]

            if demo_mode == 0:
                emoji = "üíµ"
            else:
                emoji = "üí¥"

            if creator_id == user_id:
                caption = "[–í–∞—à–∞]"
            else:
                caption = ""

            markup.add(
                InlineKeyboardButton(
                    f"{emoji}–ò–≥—Ä–∞ #{game_id:03} | {bet} RUB {caption}",
                    callback_data=f"dice-p2p-details:{game_id}:{page}"
                )
            )

        if navigation == 1:
            markup.add(
                InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >>", callback_data=f"dice-p2p:{page + 1}")
            )
        elif navigation == 2:
            markup.add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"dice-p2p:{page - 1}")
            )
        elif navigation == 3:
            markup.add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"dice-p2p:{page - 1}"),
                InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >>", callback_data=f"dice-p2p:{page + 1}")
            )

        markup.add(
            InlineKeyboardButton("–ú–æ–∏ –∏–≥—Ä—ã", callback_data=f"dice-p2p-mine:{page}"),
            InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data=f"dice-p2p-rating:{page}")
        )
        markup.add(
            InlineKeyboardButton("<< –ò–≥—Ä—ã", callback_data="dice-games"),
            InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"dice-p2p-instruction:{page}")
        )

        return markup

    @staticmethod
    def dice_p2p_details(
            game_id: int, came_from: int, is_owner: bool, cancel_available: bool
    ) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=1)

        if is_owner and cancel_available:
            markup.add(
                InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"dice-p2p-cancel:{game_id}")
            )

        markup.add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"dice-p2p:{came_from}")
        )

        return markup

    @staticmethod
    def join_fight(game_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞–≤–∞–π", url=f"{settings.bot_url}?start=join{game_id}")
        )

    @staticmethod
    def join_in_chat(user_id, user_name, game_id, game_bet, game_rounds) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                "üé≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                callback_data=f"in-chat-join:{user_name.replace(':', '')}:{user_id}:{game_id}:{game_bet}:{game_rounds}"
            ),
            InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"in-chat-cancel:{user_id}")
        )

    @staticmethod
    def withdrawal(btc_fee: int, card_fee: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton(f"ü™ô BTC {btc_fee}%", callback_data="withdrawal-amount:btc"),
            InlineKeyboardButton(f"üí≥ Card {card_fee}%", callback_data="withdrawal-amount:card"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="transactions")
        )

    @staticmethod
    def deposit() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("ü™ô BTC", callback_data="deposit-amount:btc"),
            InlineKeyboardButton("üí≥ Card", callback_data="deposit-amount:card"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="transactions")
        )

    @staticmethod
    def any_transaction_amount(
            is_amount_enough: bool, transaction_type: str, method: str, amount: int, btc_equivalent: float
    ) -> InlineKeyboardMarkup:
        if method == "card" or btc_equivalent != -1:
            if transaction_type == "withdrawal":
                back_callback_data = "withdrawal"
                forward_callback_data = "withdrawal-details"
            else:
                back_callback_data = "deposit"
                forward_callback_data = "deposit-amount-confirm"

            if is_amount_enough:
                return InlineKeyboardMarkup(row_width=2).add(
                    InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=back_callback_data),
                    InlineKeyboardButton("–î–∞–ª–µ–µ >>", callback_data=f"{forward_callback_data}:{method}:{amount}")
                )
            else:
                return InlineKeyboardMarkup(row_width=2).add(
                    InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=back_callback_data)
                )
        else:
            return Markups.back_to("profile")

    @staticmethod
    def deposit_amount_confirm(method: str, btc_equivalent: float, amount: int) -> InlineKeyboardMarkup:
        if method == "card" or btc_equivalent != -1:
            return InlineKeyboardMarkup().add(
                InlineKeyboardButton("üõë –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"deposit-amount:{method}"),
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"deposit-confirm:{method}:{amount}")
            )
        else:
            return Markups.back_to("profile")

    @staticmethod
    def withdrawal_bank(are_blanks_filled: bool, method: str, amount: int) -> InlineKeyboardMarkup:
        if are_blanks_filled:
            return InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"withdrawal-details:{method}:{amount}"),
                InlineKeyboardButton("–î–∞–ª–µ–µ >>", callback_data=f"withdrawal-confirm:{method}:{amount}")
            )
        else:
            return InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"withdrawal-details:{method}:{amount}")
            )

    @staticmethod
    def deposit_confirm(method: str, btc_equivalent: float, amount: int) -> InlineKeyboardMarkup:
        if method == "card" or btc_equivalent != -1:
            return InlineKeyboardMarkup().add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"deposit-amount:{method}"),
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"confirmation:deposit:{method}:{amount}:0"
                )
            )
        else:
            return Markups.back_to(f"deposit-amount:{method}")

    @staticmethod
    def admin_any_transaction_confirm(
            transaction_type: str, transaction_id: int, amount: int, is_back_button_required=False
    ) -> InlineKeyboardMarkup:
        caption = "—Å–ø–∏—Å–∞—Ç—å" if transaction_type == "withdrawal" else "–∑–∞—á–∏—Å–ª–∏—Ç—å"

        markup = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton(
                f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ {caption} {amount}", callback_data=f"admin-approbation:approve:{transaction_id}"
            ),
            InlineKeyboardButton(f"üõë –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin-approbation:reject:{transaction_id}")
        )

        if is_back_button_required:
            markup.add(InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="admin-transactions"))

        return markup

    @staticmethod
    def admin_approbation(transaction_type: str, transaction_id: int):
        if transaction_type == "withdrawal":
            return InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(f"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"admin-withdrawal-paid:{transaction_id}")
            )
        else:
            return None

    @staticmethod
    def admin(
            pvb_active: bool, pvp_active: bool, pvpc_active: bool, pvpf_active: bool, transactions_active: bool
    ) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin-total"),
            InlineKeyboardButton("‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin-transactions"),
            InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="admin-log-filtered"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin-call"),
            InlineKeyboardButton(
                f"{get_status_emoji(pvb_active)} PVB",
                callback_data=f"admin-switch-pvb"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(pvp_active)} PVP",
                callback_data=f"admin-switch-pvp"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(pvpc_active)} PVPC",
                callback_data=f"admin-switch-pvpc"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(pvpf_active)} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã PVP",
                callback_data=f"admin-switch-pvpf"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(transactions_active)} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                callback_data=f"admin-switch-transactions"
            ),
        )
