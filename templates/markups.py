from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from core.schemas.pvb import PVBDTO
from core.schemas.pvp import PVPDTO, PVPDetailsDTO
from core.schemas.user import UserDTO
from settings import settings
from .formatting.emojis import get_status_emoji, get_balance_emoji
from .menu import Menu


class Markups:
    @staticmethod
    def back_to(path: str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=path)
        )

    @staticmethod
    def navigation() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
            KeyboardButton(Menu.GAMES),
            KeyboardButton(Menu.PROFILE),
            KeyboardButton(Menu.LOTTERY),
            KeyboardButton(Menu.SUPPORT)
        )

    @staticmethod
    def games() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("ü§ñ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º", callback_data="pvb"),
            InlineKeyboardButton("üë• –ò–≥—Ä–∞ —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º", callback_data="pvp:1"),
            InlineKeyboardButton("‚öî –° —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º –≤ —á–∞—Ç–µ", callback_data="pvpc")
        )

    @staticmethod
    def profile(beta_mode: bool) -> InlineKeyboardMarkup:
        beta_caption = "–í—ã–∫–ª—é—á–∏—Ç—å –±–µ—Ç–∞-—Ä–µ–∂–∏–º" if beta_mode else "–í–∫–ª—é—á–∏—Ç—å –±–µ—Ç–∞-—Ä–µ–∂–∏–º"

        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="transactions"),
            InlineKeyboardButton("üìã –¢–æ–ø-5 –ª—É—á—à–∏—Ö", callback_data="top5"),
            InlineKeyboardButton(f"{get_balance_emoji(beta_mode)} {beta_caption}", callback_data=f"switch-beta")
        )

    @staticmethod
    def lottery() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!", url=settings.lottery_url)
        )

    @staticmethod
    def support() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=settings.support_url)
        )

    @staticmethod
    def terms_and_conditions() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üõë –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="terms-reject"),
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="terms-accept")
        )

    @staticmethod
    def pvb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="pvb-instruction"),
            InlineKeyboardButton("üìã –ú–æ–∏ –∏–≥—Ä—ã", callback_data="pvb-history"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="games"),
            InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å", callback_data="pvb-create")
        )

    @staticmethod
    def pvb_create(bots_turn_first: bool) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="pvb-create"),
            InlineKeyboardButton(f"üîÅ –ü–µ—Ä–≤—ã–π {'–±–æ—Ç' if bots_turn_first else '—è'}", callback_data="pvb-switch-turn"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="pvb"),
            InlineKeyboardButton("üé≤ –ù–∞—á–∞—Ç—å", callback_data=f"pvb-start")
        )

    @staticmethod
    def pvb_history(games_pvb: list[PVBDTO] | None) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=1)

        if games_pvb is None:
            markup.add(
                InlineKeyboardButton(
                    "üîî –í—ã –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ —Å—ã–≥—Ä–∞–ª–∏", callback_data="None"
                ),
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="pvb")
            )
            return markup

        for pvb in games_pvb:
            if pvb.player_won is None:
                sign = "ü§ù"
            elif pvb.player_won:
                sign = "üí∞"
            else:
                sign = "üíÄ"

            markup.add(
                InlineKeyboardButton(
                    f"{sign} –ò–≥—Ä–∞ #{pvb.id:03} | {get_balance_emoji(pvb.beta_mode)} {pvb.bet}",
                    callback_data="None"
                )
            )

        markup.add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="pvb")
        )

        return markup

    @staticmethod
    def pvp(user_id: int, games_pvp: list[PVPDTO] | None, pages_total: int, page: int = 0) -> InlineKeyboardMarkup:
        if games_pvp is None:
            return InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data="pvp-rating"),
                InlineKeyboardButton("–ú–æ–∏ –∏–≥—Ä—ã", callback_data="pvp-history"),
                InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="pvp-instruction"),
                InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"pvp:1"),
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="games"),
                InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å", callback_data="pvp-create"),
            )

        if page > pages_total:
            page = 1

        pagination_options_mode: int = 0

        if pages_total == 1:
            page_fill_start = 0
            page_fill_end = len(games_pvp)

        else:
            if page == 1:
                page_fill_start = 0
                page_fill_end = 5
                pagination_options_mode = 1

            elif page == pages_total:
                page_fill_start = (pages_total - 1) * 5
                page_fill_end = len(games_pvp)
                pagination_options_mode = 2

            else:
                page_fill_start = (page - 1) * 5
                page_fill_end = page * 5
                pagination_options_mode = 3

        markup: InlineKeyboardMarkup = InlineKeyboardMarkup(row_width=2)

        markup.add(
            InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data=f"pvp-rating"),
            InlineKeyboardButton("–ú–æ–∏ –∏–≥—Ä—ã", callback_data=f"pvp-history")
        )

        for i in range(page_fill_start, page_fill_end):
            markup.add(
                InlineKeyboardButton(
                    f"{get_balance_emoji(games_pvp[i].beta_mode)} "
                    f"–ò–≥—Ä–∞ #{games_pvp[i].id:03} | {games_pvp[i].bet} RUB "
                    f"{'[–í–∞—à–∞]' if games_pvp[i].creator_tg_id == user_id else ''}",
                    callback_data=f"pvp-details:{games_pvp[i].id}:{page}"
                )
            )

        if pagination_options_mode == 1:
            markup.add(
                InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >>", callback_data=f"pvp:{page + 1}")
            )
        elif pagination_options_mode == 2:
            markup.add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"pvp:{page - 1}")
            )
        elif pagination_options_mode == 3:
            markup.add(
                InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"pvp:{page - 1}"),
                InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >>", callback_data=f"pvp:{page + 1}")
            )

        markup.add(
            InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"pvp-instruction"),
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"pvp:1")
        )
        markup.add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="games"),
            InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å", callback_data="pvp-create")
        )

        return markup

    @staticmethod
    def pvp_details(user: UserDTO, pvp_details: PVPDetailsDTO, page: int) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=1)

        if user.tg_id == pvp_details.creator_tg_id and pvp_details.cancellation_unlocks_in is None:
            markup.add(
                InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"pvp-cancel:{pvp_details.id}")
            )

        markup.add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f"pvp:{page}")
        )

        return markup

    @staticmethod
    def pvp_create() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="pvp"),
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="pvp-create"),
            InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="pvp-confirm")
        )

    @staticmethod
    def pvpc() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å!", url=settings.pvpc_url)
        )

    @staticmethod
    def pvpc_join(game_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("üé≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"pvpc-join:{game_id}"),
            InlineKeyboardButton("üíÄ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"pvpc-cancel:{game_id}")
        )

    @staticmethod
    def admin(
            pvb_active: bool, pvp_active: bool, pvpc_active: bool, pvpf_active: bool, transactions_active: bool
    ) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin-total"),
            InlineKeyboardButton("‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin-transactions"),
            InlineKeyboardButton("üé≤ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã", callback_data="admin-log-filtered"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin-mailing"),
            InlineKeyboardButton(
                f"{get_status_emoji(pvb_active)} PVB",
                callback_data=f"admin-switch-pvb"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(pvp_active)} PVP",
                callback_data=f"admin-switch-pvp"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(pvpc_active)} PVPC",
                callback_data=f"admin-switch-pvpc"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(pvpf_active)} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã PVP",
                callback_data=f"admin-switch-pvpf"
            ),
            InlineKeyboardButton(
                f"{get_status_emoji(transactions_active)} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                callback_data=f"admin-switch-transactions"
            ),
        )

    @staticmethod
    def admin_mailing() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("üì¢ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin-mailing-start"),
            InlineKeyboardButton("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="admin-mailing-preview"),
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data="admin")
        )
